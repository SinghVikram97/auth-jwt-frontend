{"version":3,"sources":["components/Navbar.js","components/Home.js","components/SignIn.js","history.js","components/Profile.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","authenticated","_this2","this","props","signedIn","react_default","a","createElement","className","react_router_dom","to","href","data-target","src","alt","onClick","localStorage","clear","onSignIn","id","Component","Home","SignIn","class","action","method","type","name","for","style","marginTop","value","createHistory","Profile","username","fetch","mode","credentials","then","res","json","data","console","log","App","history","Navbar_Navbar","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b608e88.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nexport default class Navbar extends Component {\n  state = {\n    authenticated: null\n  };\n  render() {\n    if (this.props.signedIn === true) {\n      return (\n        <div>\n          <nav className=\"nav-wrapper\">\n            <div className=\"container\">\n              <Link to=\"/\" className=\"brand-logo\">\n                Auth\n              </Link>\n              <a\n                href=\"#abc\"\n                data-target=\"mobile-demo\"\n                className=\"sidenav-trigger\"\n              >\n                <img\n                  src=\"https://img.icons8.com/ios/50/000000/menu.png\"\n                  alt=\"smallmenu\"\n                />\n              </a>\n              <ul className=\"right hide-on-med-and-down\">\n                <li>\n                  <Link\n                    to=\"/\"\n                    onClick={() => {\n                      localStorage.clear();\n                      this.props.onSignIn(false);\n                    }}\n                  >\n                    Logout\n                  </Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <ul className=\"sidenav\" id=\"mobile-demo\">\n            <li>\n              <Link\n                to=\"/\"\n                onClick={() => {\n                  localStorage.clear();\n                  this.props.onSignIn(false);\n                }}\n              >\n                Logout\n              </Link>\n            </li>\n          </ul>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <nav className=\"nav-wrapper\">\n            <div className=\"container\">\n              <Link to=\"/\" className=\"brand-logo\">\n                Auth\n              </Link>\n              <a\n                href=\"#abc\"\n                data-target=\"mobile-demo\"\n                className=\"sidenav-trigger\"\n              >\n                <img\n                  src=\"https://img.icons8.com/ios/50/000000/menu.png\"\n                  alt=\"menu\"\n                />\n              </a>\n              <ul className=\"right hide-on-med-and-down\">\n                <li>\n                  <Link to=\"/sign-in\">Sign In</Link>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <ul className=\"sidenav\" id=\"mobile-demo\">\n            <li>\n              <Link to=\"/sign-in\">Sign In</Link>\n            </li>\n            <li>\n              <Link to=\"/sign-up\">Sign Up</Link>\n            </li>\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Home extends Component {\n  render() {\n    return <div>Welcome!</div>;\n  }\n}\n","import React, { Component } from \"react\";\nexport default class SignIn extends Component {\n  render() {\n    return (\n      <div class=\"row mt5\">\n        <div className=\"col s4\" />\n        <div className=\"col s4\">\n          <form action=\"http://localhost:4444/login\" method=\"post\">\n            <div class=\"input-field\">\n              <input\n                id=\"username\"\n                type=\"text\"\n                class=\"validate\"\n                name=\"username\"\n              />\n              <label for=\"username\">Username/Mobile No.</label>\n            </div>\n            <div class=\"input-field\">\n              <input\n                id=\"password\"\n                type=\"password\"\n                class=\"validate\"\n                name=\"password\"\n              />\n              <label for=\"password\">Password (Ignore for OTP login) </label>\n            </div>\n            <div\n              className=\"input-field center-align\"\n              style={{ marginTop: \"10%\" }}\n            >\n              <input type=\"submit\" value=\"submit\" />\n            </div>\n          </form>\n        </div>\n        <div className=\"col s4\" />\n      </div>\n    );\n  }\n}\n","import createHistory from \"history/createBrowserHistory\";\nexport default createHistory();\n","import React, { Component } from \"react\";\n\nexport default class Profile extends Component {\n  state = {\n    username: \"\"\n  };\n  componentDidMount() {\n    fetch(\"http://localhost:4444/profile\", {\n      mode: \"cors\",\n      method: \"GET\",\n      credentials: \"include\"\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n      });\n  }\n  render() {\n    return <div>Hi</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar\";\nimport Home from \"./components/Home\";\nimport SignIn from \"./components/SignIn\";\nimport history from \"./history\";\nimport Profile from \"./components/Profile\";\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter history={history}>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/sign-in\" component={SignIn} />\n            <Route exact path=\"/profile\" component={Profile} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/tachyons'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}